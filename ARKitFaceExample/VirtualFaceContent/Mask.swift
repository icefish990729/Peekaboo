/*
See LICENSE folder for this sampleâ€™s licensing information.

Abstract:
An `SCNNode` subclass demonstrating a basic use of `ARSCNFaceGeometry`.
*/

import ARKit
import SceneKit
import UIKit

class Mask: SCNNode, VirtualFaceContent {
    
    var faceOrigin: SCNNode?
    var sampleVector: Array<Array<Float>>?
    init(geometry: ARSCNFaceGeometry) {
        let material = geometry.firstMaterial!
        
        material.diffuse.contents = UIColor.lightGray
        material.lightingModel = .physicallyBased
        
        super.init()
        self.geometry = geometry
        
        faceOrigin = loadedContentForAsset(named: "coordinateOrigin")
        addChildNode(faceOrigin!)
        faceOrigin?.position.z = 0.05;
        
        
        let arr1: Array<Float> = [-53.2673492, -50.9617844, -57.811512, -86.2526855, -109.662857, -136.049911, -128.742905, -84.3314819, -19.4891548, -4.58762074, -6.42769051, -11.2341347, -2.59429216, 25.2015152, 70.6496124, 71.1915665, 99.4671173, 55.3600502, 67.6538773, 52.9193878, 44.8359566, 50.2623634, 52.5763626, 71.6233978, 56.6161804, 34.0710411, 35.8529205, 57.5131569, 40.9208908, 34.9447784, 22.1110687, 16.9694805, 3.24534249, 7.80820847, 4.8960557, 1.63299966, -4.39435244, -4.22125673, -7.57725906, -9.07765675, -7.86421824, -6.21516275, -5.54479647, -5.38930321, -6.3346138, -3.3289938, -5.51572084, -2.82945108, -4.40151453, -3.54644847, -4.45584774, -1.97020364, -3.29002738, -2.5524013, -2.51184225, -2.39527774, -3.26721931, -3.29579234, 0.0571459532, 5.39674425]
        
        let arr2: Array<Float> = [-35.7116928, -49.0494804, -50.2058487, -54.9453697, -76.0524521, -82.7151947, -89.5256195, -78.6402054, -44.9483833, -59.3465576, -10.8850746, -6.1137228, 3.93502426, 13.6110191, 37.1973953, 52.6691246, 67.276062, 34.6395378, 57.2793922, 68.6535263, 69.0978928, 62.5429497, 55.5660934, 41.6095352, 35.9980965, 29.750597, 25.7262783, 28.2539425, 23.9565029, 39.6317062, 13.1938238, 10.4216671, 10.9087114, 9.36256695, 6.70664024, 2.38312411, -0.680107594, -6.73416996, -7.03074026, -6.97948027, -4.46466732, -6.86276722, -4.11396837, -3.81948423, -2.89123511, -3.95659351, -1.24847519, -0.137444586, -2.20246601, -0.742264092, -2.01007342, -1.96887183, -0.192318112, 0.200271606, -2.68636274, -3.24737287, -3.18719077, -5.39988279, -6.18882465, -5.11616468]
        
        let arr3: Array<Float> = [-81.8062592, -79.9202194, -95.2897949, -116.233978, -113.027542, -77.6597824, -120.059845, -87.2641068, -62.9000359, -69.0279922, -49.8612595, -30.0339241, 0.739619136, 2.25134182, 14.3099203, 33.476017, 74.5529709, 90.7642746, 75.2739944, 74.1533966, 54.2820244, 62.1755409, 66.5842743, 36.4955521, 38.6147957, 25.3688545, 6.26757717, 12.9037352, 9.01915169, 6.09099865, 4.08373785, 0.474527478, -1.14262104, -1.88961625, -1.62012875, -3.6480279, -2.31646013, -3.93815327, -4.53807402, -0.804513693, -2.16141343, -1.07064843, -0.303462148, -1.12816691, -1.90339983, -0.400394201, -0.476166606, -0.535547733, 0.476464629, 1.02214515, 1.08830631, 0.757575035, 0.097155571, 1.22763216, 0.784471631, -0.421777368, -0.741705298, -1.12481415, -1.23225152, -2.77817249]
        
        let arr4: Array<Float> = [-54.089798, -81.0820618, -87.5057297, -93.6008987, -78.828186, -71.8792191, -95.1075211, -189.571014, -76.9348221, -69.980072, -103.10067, -39.4752617, -24.4456902, -5.68073225, 7.6764822, 18.6196709, 106.725975, 70.7733307, 71.8796463, 113.839211, 54.6109123, 40.5501404, 55.8468323, 14.1286106, 6.7320838, 11.5171824, -3.10901546, -6.1677022, -7.1827693, -5.32019901, -8.11345863, -5.92760754, -7.40259886, -5.76678658, -7.2370472, -5.78809547, -8.99601746, -6.80495071, -5.70151949, -10.3030729, -3.42281532, -2.28071594, -3.5853498, -2.21442437, -1.95749104, -3.50251794, -2.29725623, -2.20524144, -5.9991889, -3.72756267, -2.32931232, -3.20218515, -3.066957, -1.50065875, -2.78320169, -1.59189105, -2.70444894, -3.01145029, -1.91511583, -2.96523786]
        
        let arr5: Array<Float> = [-69.1503296, -83.6681976, -81.5279617, -79.9717636, -88.6665192, -89.5529022, -89.866333, -65.1869583, -43.0425987, -31.9535656, -26.9410763, 4.27797413, 15.6518822, 59.0208168, 58.8602562, 48.7184143, 54.1145172, 46.7753792, 60.4262581, 56.1217308, 62.3600655, 57.6715469, 50.5010262, 54.3817139, 54.983284, 48.0262642, 41.2935562, 33.3201141, 26.0629883, 16.1369705, 17.8118801, 6.90270233, 5.20095253, -0.324249268, -4.82253742, -5.7010355, -4.38272953, -4.40200806, -5.42642546, -3.93170857, -3.38958573, -2.68077469, -2.56147242, -1.52846801, -3.40355563, -2.47199082, -0.978149474, -0.134147704, -0.452082604, 0.247098505, -0.835396349, -2.26328158, -3.85964298, -4.15166855, -4.60024929, -4.61650991, -4.70999622, -5.97894192, -3.45541167, -4.4803133]
        
        let arr6: Array<Float> = [-81.4544067, -61.006546, -75.777916, -88.565239, -90.4969482, -91.8222885, -96.7587814, -60.5462303, -26.4817104, -4.78733349, 6.00360346, 9.0579319, 32.3145828, 43.4771538, 56.4292717, 70.735321, 61.6394272, 83.1664658, 78.098465, 63.5728149, 62.8688927, 49.9417801, 47.5351143, 59.653038, 19.9292603, 11.083931, 24.0153828, 7.91538525, 9.25239182, 7.06188393, -0.433772802, -1.70491636, -7.18694162, -4.95728111, -5.16936207, -11.7044153, -4.81668854, -3.59531498, -5.08517027, -8.88194847, -4.75101185, -7.59277487, -7.41925097, -12.0009851, -7.08162785, -5.77528048, -11.8447094, -3.79610801, -5.40196896, -4.40944004, -2.01489782, -1.9992888, -0.294670463, -1.43073499, -1.63327909, -0.0467523932, 1.5307591, 1.003407, 0.463239849, -0.988468528]
        
        let arr7: Array<Float> = [-24.8499966, -35.5835991, -82.90522, -89.1538696, -94.0141754, -108.347588, -91.4796143, -87.6800003, -78.4276962, -35.0803528, -8.56615639, 2.61798501, 11.4884596, 22.6288109, 36.269371, 31.8986359, 55.4659386, 52.0301056, 57.3648529, 81.7703094, 40.7128868, 74.8243027, 86.3116302, 43.8874016, 70.4096985, 48.1683769, 33.5995102, 45.3215828, 34.8540382, 29.0854282, 41.0247612, 9.93534946, 8.52864265, 5.49376011, 3.32772732, -4.04089689, -4.70835733, -4.97467804, -5.12998533, -4.40314388, -4.41838074, -3.78224993, -7.8356266, -7.53369188, -5.06430864, -5.55481768, -4.9468503, -3.65585089, -4.64498997, -8.34822655, -5.99909592, -13.672039, -13.3969259, -10.4721632, -13.1100044, -10.304451, -9.39279747, -4.88884735, -5.67089748, -5.13337564]
        
        let arr8: Array<Float> = [-49.1039467, -82.8285522, -109.914688, -116.846634, -118.537842, -139.183334, -246.247131, -137.979355, -123.656876, -117.416428, -91.9145355, -66.9160309, -37.4318924, -1.23031437, 3.60719872, 7.2358551, 39.421936, 40.4008217, 47.3559074, 94.5608597, 34.9006996, 31.245575, 48.5066681, 12.1892614, 9.29705811, 9.64172173, -1.98706985, -3.42514372, -6.71867275, -2.20192599, -3.05734587, -1.95473433, -2.47182322, -2.95037413, -3.8409977, -1.90239406, -0.467821956, -0.496339053, 1.18996954, -0.871289492, 0.125672668, 0.605657697, 1.01599836, 0.311657786, -1.10838556, -2.31165433, -1.50127339, -1.62435699, -1.97555876, -1.88229609, -1.10646713, -1.25762081, -0.860951841, -1.35734677, -0.854413986, -0.728908896, -1.83837485, -0.473298132, -0.293776393, 0.427309424]
        
        let arr9: Array<Float> = [-45.6951561, -76.8368912, -87.5967026, -89.886116, -87.0095215, -116.945786, -115.848946, -82.310997, -69.2958755, -26.6489754, 8.20409489, -4.68954468, 6.9537015, 54.7903023, 80.5254288, 64.4969559, 36.1207123, 45.4631081, 62.2879333, 64.833725, 58.2704773, 53.736412, 47.5934486, 38.5506935, 47.4659805, 22.723526, 27.8644161, 16.8521233, 13.2188206, 10.614954, 12.5870857, 7.37559032, 1.22878695, 0.496804714, -0.6968714, -5.25055456, -2.79486179, -3.85966158, -4.2287631, -1.66445971, -2.69548965, -3.30870962, -2.13697553, -1.56655908, -2.99196696, -0.359416008, 0.229682773, 0.985655904, 0.602137327, 0.90951097, -1.59919262, 0.186152756, -2.93042517, -2.08463526, -2.99986458, -2.46079636, -4.09735346, -3.557019, -3.31938267, -3.82784748]
        
        self.sampleVector = [arr1, arr2, arr3, arr4, arr5, arr6, arr7, arr8, arr9]
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("\(#function) has not been implemented")
    }
    
    // MARK: VirtualFaceContent
    var i = 1
    var preX = Float(0.0)
    var preY = Float(0.0)
    var vectorX = Float(0.0)
    var vectorY = Float(0.0)
    var state: Int = 0
    var buffer: Array<Float>?
    var startPosX: Float = Float(0.0)
    var startPosY: Float = Float(0.0)
    
    
    var viewController: ViewController!
    /// - Tag: SCNFaceGeometryUpdate
    func update(withFaceAnchor anchor: ARFaceAnchor) {
        let faceGeometry = geometry as! ARSCNFaceGeometry
        faceGeometry.update(from: anchor.geometry)
        let nosePos: SCNVector3 = faceOrigin!.worldPosition
        let facePos: SCNVector3 = self.worldPosition
        let vector: SCNVector3 = SCNVector3(
            nosePos.x - facePos.x,
            nosePos.y - facePos.y,
            nosePos.z - facePos.z
        )
        
        /* Calculate the fromula */
        
        
        let t = (-facePos.z)/vector.z
        let newX = facePos.x + vector.x * t
        let newY = facePos.y + vector.y * t
        let newZ = 0
        
        vectorX = (newX - preX)
        vectorY = (newY - preY)
        
        //print(newX, newY, "/",preX, preY, "/",vectorX, vectorY)
        //print(vectorX, vectorY)
        if self.state == 0 {
            if vectorY < 0 && vectorY < -0.002 {
                state = 1
                self.buffer = Array()
                self.startPosX = newX
                self.startPosY = newY
            }
        } else if self.state == 1 {
            if self.buffer?.count == 60 {
                if let buffer = self.buffer {
                    var summary: Float = 0.0
                    for elemt in buffer {
                        if elemt < 0 {
                            summary -= elemt
                        } else {
                            summary += elemt
                        }
                    }
                    
                    if let sampleVector = self.sampleVector {
                        var error: Float = 0.0
                        for vector in sampleVector {
                            var sumOfElemt: Float = 0.0
                            for (idx, elemt) in vector.enumerated() {
                                var diff: Float = buffer[idx] - elemt
                                diff = diff * diff;
                                sumOfElemt += diff
                            }
                            error += sqrt(sumOfElemt)
                        }
                        
                        // nod the head
                        print (error)
                        if error < 3000.0 {
                            print(error, summary, buffer, startPosX, startPosY)
                            DispatchQueue.main.async{
                                self.viewController.click(
                                    to1: self.startPosX,
                                    to2: self.startPosY
                                )
                            }
                        }
                    }
                }
                self.state = 0
            } else {
                let scale: Float = 10000
                self.buffer?.append(vectorY * scale)
            }
        }
        preX = newX
        preY = newY
        
        if(i%1 == 0){
            DispatchQueue.main.async{
                self.viewController.move(to1: newX, to2: newY)
            }
        }
        
        i += 1
    }
}
